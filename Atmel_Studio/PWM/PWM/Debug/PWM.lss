
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068b  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000599  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pwm_init>:

// initialize PWM
void pwm_init()
{
	// initialize timer0 in PWM mode
	TCCR0 |= (1<<WGM00)|(1<<COM01)|(1<<WGM01)|(1<<CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	89 66       	ori	r24, 0x69	; 105
  70:	83 bf       	out	0x33, r24	; 51
	
	// make sure to make OC0 pin (pin PB3 for atmega32) as output pin
	DDRB |= (1<<PB3);
  72:	bb 9a       	sbi	0x17, 3	; 23
  74:	08 95       	ret

00000076 <main>:
void main()
{
	uint8_t brightness;
	
	// initialize timer0 in PWM mode
	pwm_init();
  76:	0e 94 36 00 	call	0x6c	; 0x6c <pwm_init>
	{
		// increasing brightness
		//for (brightness = 0; brightness < 255; ++brightness)
		//{
			// set the brightness as duty cycle
			OCR0 = 255;
  7a:	9f ef       	ldi	r25, 0xFF	; 255
		
		// decreasing brightness
		//for (brightness = 255; brightness > 0; --brightness)
		//{
			// set the brightness as duty cycle
			OCR0 = 200;
  7c:	88 ec       	ldi	r24, 0xC8	; 200
	{
		// increasing brightness
		//for (brightness = 0; brightness < 255; ++brightness)
		//{
			// set the brightness as duty cycle
			OCR0 = 255;
  7e:	9c bf       	out	0x3c, r25	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f eb       	ldi	r18, 0xBF	; 191
  82:	37 e2       	ldi	r19, 0x27	; 39
  84:	49 e0       	ldi	r20, 0x09	; 9
  86:	21 50       	subi	r18, 0x01	; 1
  88:	30 40       	sbci	r19, 0x00	; 0
  8a:	40 40       	sbci	r20, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x10>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x1a>
  90:	00 00       	nop
		
		// decreasing brightness
		//for (brightness = 255; brightness > 0; --brightness)
		//{
			// set the brightness as duty cycle
			OCR0 = 200;
  92:	8c bf       	out	0x3c, r24	; 60
  94:	2f e7       	ldi	r18, 0x7F	; 127
  96:	3a e1       	ldi	r19, 0x1A	; 26
  98:	46 e0       	ldi	r20, 0x06	; 6
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x24>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x2e>
  a4:	00 00       	nop
			
			// delay so as to make the user "see" the change in brightness
			_delay_ms(2000);
			
			OCR0 = 0;
  a6:	1c be       	out	0x3c, r1	; 60
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	3d e0       	ldi	r19, 0x0D	; 13
  ac:	43 e0       	ldi	r20, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	40 40       	sbci	r20, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x38>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x42>
  b8:	00 00       	nop
  ba:	e1 cf       	rjmp	.-62     	; 0x7e <main+0x8>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
